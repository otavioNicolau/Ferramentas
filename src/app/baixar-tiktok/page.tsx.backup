'use client';

import ToolLayout from '@/components/ToolLayout';
import { Download, ExternalLink, AlertCircle, Check, Loader2, Play, Heart, MessageCircle, Share2, Eye, Clock, User, Music, Copy, Share } from 'lucide-react';
import { useState, useRef, useEffect } fro        await new Promise(resolve => setTimeout(resolve, 300));
      }
      
      if (!response.ok) {
        const errorData = await response.json();
        let errorMessage = errorData.message || `Erro ao baixar ${downloadType === 'video' ? 'vídeo' : 'áudio'}`;
        
        throw new Error(errorMessage);t { saveAs } from 'file-saver';

interface VideoInfo {
  id: string;
  title: string;
  author: string;
  authorAvatar: string;
  thumbnailUrl: string;
  videoUrl: string;
  audioUrl: string;
  duration: number;
  formats: Array<{
    type: string;
    quality: string;
    url: string;
  }>;
  stats: {
    likes: number;
    comments: number;
    shares: number;
    views: number;
  };
}

export default function BaixarTiktokPage() {
  const [url, setUrl] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [videoInfo, setVideoInfo] = useState<VideoInfo | null>(null);
  const [downloadType, setDownloadType] = useState<'video' | 'audio'>('video');
  const [downloadProgress, setDownloadProgress] = useState(0);
  const [isDownloading, setIsDownloading] = useState(false);
  const [showVideoPreview, setShowVideoPreview] = useState(false);
  const [downloadHistory, setDownloadHistory] = useState<Array<{url: string, title: string, date: string}>>([]);
  const [copied, setCopied] = useState(false);
  
  const urlInputRef = useRef<HTMLInputElement>(null);
  
  // Carregar histórico de downloads do localStorage
  useEffect(() => {
    const saved = localStorage.getItem('tiktok-download-history');
    if (saved) {
      try {
        setDownloadHistory(JSON.parse(saved));
      } catch (e) {
        console.error('Erro ao carregar histórico:', e);
      }
    }
  }, []);
  
  // Atalhos de teclado
  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      // Ctrl/Cmd + Enter para buscar
      if ((e.ctrlKey || e.metaKey) && e.key === 'Enter') {
        e.preventDefault();
        if (!loading && !isDownloading) {
          fetchVideoInfo();
        }
      }
      
      // Ctrl/Cmd + V para colar URL
      if ((e.ctrlKey || e.metaKey) && e.key === 'v') {
        setTimeout(() => {
          if (urlInputRef.current && document.activeElement === urlInputRef.current) {
            navigator.clipboard.readText().then(text => {
              if (isValidTikTokUrl(text)) {
                setUrl(text);
              }
            }).catch(() => {});
          }
        }, 100);
      }
      
      // Escape para limpar
      if (e.key === 'Escape') {
        clearResults();
      }
    };
    
    document.addEventListener('keydown', handleKeyDown);
    return () => document.removeEventListener('keydown', handleKeyDown);
  }, [loading, isDownloading]);
  
  // Salvar histórico de downloads
  const saveToHistory = (url: string, title: string) => {
    const newHistory = [
      { url, title, date: new Date().toISOString() },
      ...downloadHistory.slice(0, 9) // Manter apenas os últimos 10
    ];
    setDownloadHistory(newHistory);
    localStorage.setItem('tiktok-download-history', JSON.stringify(newHistory));
  };
  
  // Função para validar URL do TikTok
  const isValidTikTokUrl = (url: string): boolean => {
    const tiktokRegex = /^(https?:\/\/)?(www\.|vm\.)?tiktok\.com\/.+/i;
    return tiktokRegex.test(url);
  };
  
  // Função para formatar duração
  const formatDuration = (seconds: number): string => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  };
  
  // Função para formatar números
  const formatNumber = (num: number): string => {
    if (num >= 1000000) {
      return (num / 1000000).toFixed(1) + 'M';
    } else if (num >= 1000) {
      return (num / 1000).toFixed(1) + 'K';
    }
    return num.toString();
  };
  
  // Função para copiar URL
  const copyUrl = async () => {
    if (videoInfo) {
      try {
        await navigator.clipboard.writeText(url);
        setCopied(true);
        setTimeout(() => setCopied(false), 2000);
      } catch (error) {
        console.error('Erro ao copiar URL:', error);
      }
    }
  };
  
  // Função para compartilhar
  const shareVideo = async () => {
    if (videoInfo && navigator.share) {
      try {
        await navigator.share({
          title: videoInfo.title,
          text: `Confira este vídeo do TikTok: ${videoInfo.title}`,
          url: url
        });
      } catch (error) {
        console.error('Erro ao compartilhar:', error);
      }
    } else {
      // Fallback para copiar URL
      copyUrl();
    }
  };
  
  // Função para buscar informações do vídeo
  const fetchVideoInfo = async () => {
    if (!url.trim()) {
      setError('Por favor, insira uma URL do TikTok');
      return;
    }
    
    if (!isValidTikTokUrl(url)) {
      setError('URL do TikTok inválida');
      return;
    }
    
    setError('');
    setLoading(true);
    setVideoInfo(null);
    setShowVideoPreview(false);
    
    try {
      const response = await fetch('/api/tiktok/info', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ url }),
      });
      
      const data = await response.json();
      
      if (!response.ok) {
        // Se a API falhar, mostrar dados de demonstração
        if (response.status >= 500 || data.message?.includes('Network')) {
          setVideoInfo({
            id: 'demo-123',
            title: 'Vídeo de Demonstração do TikTok',
            author: '@usuario_demo',
            authorAvatar: 'https://via.placeholder.com/50x50/007acc/ffffff?text=U',
            thumbnailUrl: 'https://via.placeholder.com/300x400/007acc/ffffff?text=TikTok+Video',
            videoUrl: '',
            audioUrl: '',
            duration: 30,
            formats: [
              { type: 'video', quality: 'HD', url: '' },
              { type: 'audio', quality: 'Original', url: '' }
            ],
            stats: {
              likes: 1500,
              comments: 89,
              shares: 45,
              views: 12000
            }
          });
          setError('⚠️ Modo demonstração ativado. A API do TikTok está temporariamente indisponível.');
          return;
        }
        throw new Error(data.message || 'Erro ao buscar informações do vídeo');
      }
      
      setVideoInfo(data);
    } catch (error) {
      setError(error instanceof Error ? error.message : 'Erro desconhecido');
    } finally {
      setLoading(false);
    }
  };
  
  // Função para baixar o vídeo ou áudio
  const downloadMedia = async () => {
    if (!videoInfo) return;
    
    // Se estamos em modo demo, simular download
    if (videoInfo.id === 'demo-123') {
      setIsDownloading(true);
      setDownloadProgress(0);
      
      // Simular progresso
      for (let i = 0; i <= 100; i += 10) {
        await new Promise(resolve => setTimeout(resolve, 200));
        setDownloadProgress(i);
      }
      
      setError('⚠️ Download simulado no modo demonstração. A funcionalidade real requer uma API do TikTok funcionando.');
      setIsDownloading(false);
      return;
    }
    
    setIsDownloading(true);
    setDownloadProgress(0);
    
    try {
      // Simular progresso - diferentes para vídeo e áudio
      const progressInterval = setInterval(() => {
        setDownloadProgress(prev => {
          const maxProgress = downloadType === 'audio' ? 80 : 90; // Deixar espaço para conversão
          if (prev >= maxProgress) {
            clearInterval(progressInterval);
            return maxProgress;
          }
          return prev + (downloadType === 'audio' ? 8 : 10);
        });
      }, downloadType === 'audio' ? 300 : 200); // Mais devagar para áudio
      
      const response = await fetch('/api/tiktok/download', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ url, type: downloadType }),
      });
      
      clearInterval(progressInterval);
      
      // Para áudio, simular progresso de conversão
      if (downloadType === 'audio') {
        setDownloadProgress(85);
        await new Promise(resolve => setTimeout(resolve, 500));
        setDownloadProgress(95);
        await new Promise(resolve => setTimeout(resolve, 300));
      }
      
      if (debugMode) {
        console.log('Response status:', response.status);
        console.log('Response headers:', Object.fromEntries(response.headers.entries()));
      }
      
      if (!response.ok) {
        const errorData = await response.json();
        let errorMessage = errorData.message || `Erro ao baixar ${downloadType === 'video' ? 'vídeo' : 'áudio'}`;
        
        if (debugMode) {
          console.error('Erro de download:', errorData);
        }
        
        // Personalizar mensagens de erro
        if (errorMessage.includes('timeout')) {
          errorMessage = 'Download cancelado por timeout. Tente novamente.';
        } else if (errorMessage.includes('não encontrada') && downloadType === 'audio') {
          errorMessage = 'Áudio não disponível para este vídeo. Tente baixar o vídeo.';
        } else if (errorMessage.includes('muito grande')) {
          errorMessage = 'Arquivo muito grande para download. Tente um vídeo menor.';
        }
        
        throw new Error(errorMessage);
      }
      
      const blob = await response.blob();
      const fileName = `tiktok-${downloadType === 'video' ? 'video' : 'audio'}-${videoInfo.id || Date.now()}.${downloadType === 'video' ? 'mp4' : 'mp3'}`;
      
      if (debugMode) {
        console.log('Download concluído:', { 
          fileName, 
          size: blob.size, 
          type: blob.type 
        });
      }
      
      saveAs(blob, fileName);
      
      // Salvar no histórico
      saveToHistory(url, videoInfo.title);
      
      setDownloadProgress(100);
    } catch (error) {
      if (debugMode) {
        console.error('Erro completo:', error);
      }
      setError(error instanceof Error ? error.message : 'Erro desconhecido');
    } finally {
      setIsDownloading(false);
    }
  };
  
  // Função para limpar os resultados
  const clearResults = () => {
    setVideoInfo(null);
    setError('');
    setUrl('');
    setDownloadProgress(0);
    setShowVideoPreview(false);
  };
  
  // Função para usar URL do histórico
  const useHistoryUrl = (historyUrl: string) => {
    setUrl(historyUrl);
  };
  
  return (
    <ToolLayout
      title="Download de Vídeos do TikTok"
      description="Baixe vídeos do TikTok sem marca d'água em alta qualidade de forma rápida e fácil."
    >
      <div className="space-y-6">
        {/* URL Input */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            URL do vídeo do TikTok
          </label>
          <div className="flex gap-2">
            <input
              type="url"
              placeholder="https://www.tiktok.com/@user/video/..."
              className="flex-1 border border-gray-300 rounded-md px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              value={url}
              onChange={(e) => setUrl(e.target.value)}
              disabled={loading || isDownloading}
              ref={urlInputRef}
            />
            <button 
              className="bg-blue-600 text-white px-6 py-2 rounded-md hover:bg-blue-700 transition-colors flex items-center gap-2 disabled:bg-blue-400 disabled:cursor-not-allowed"
              onClick={fetchVideoInfo}
              disabled={loading || isDownloading}
            >
              {loading ? <Loader2 size={16} className="animate-spin" /> : <ExternalLink size={16} />}
              {loading ? 'Buscando...' : 'Buscar'}
            </button>
          </div>
          {error && (
            <div className="mt-2 text-red-500 flex items-center gap-1">
              <AlertCircle size={16} />
              <span className="flex-1">{error}</span>
              <button 
                onClick={() => setError('')}
                className="text-red-400 hover:text-red-600 p-1"
                title="Limpar erro"
              >
                ×
              </button>
            </div>
          )}
        </div>

        {/* Histórico de Downloads */}
        {downloadHistory.length > 0 && (
          <div className="bg-gray-50 rounded-lg p-4">
            <h3 className="text-sm font-medium text-gray-700 mb-2">Histórico Recente</h3>
            <div className="space-y-1">
              {downloadHistory.slice(0, 3).map((item, index) => (
                <button
                  key={index}
                  onClick={() => useHistoryUrl(item.url)}
                  className="block w-full text-left text-sm text-gray-600 hover:text-blue-600 hover:bg-blue-50 p-2 rounded transition-colors"
                >
                  <div className="truncate">{item.title}</div>
                  <div className="text-xs text-gray-400">{new Date(item.date).toLocaleDateString()}</div>
                </button>
              ))}
            </div>
          </div>
        )}

        {/* Preview do vídeo */}
        {videoInfo && (
          <div className="bg-gray-50 rounded-lg p-6">
            <h3 className="text-lg font-semibold mb-4">Informações do Vídeo</h3>
            
            <div className="bg-white rounded border p-4">
              <div className="flex flex-col lg:flex-row gap-6">
                {/* Thumbnail e Preview */}
                <div className="w-full lg:w-1/3">
                  <div className="relative">
                    <img 
                      src={videoInfo.thumbnailUrl} 
                      alt="Thumbnail" 
                      className="w-full h-auto rounded object-cover"
                    />
                    {videoInfo.duration > 0 && (
                      <div className="absolute bottom-2 right-2 bg-black bg-opacity-75 text-white text-xs px-2 py-1 rounded">
                        {formatDuration(videoInfo.duration)}
                      </div>
                    )}
                    {videoInfo.videoUrl && (
                      <button
                        onClick={() => setShowVideoPreview(!showVideoPreview)}
                        className="absolute inset-0 flex items-center justify-center bg-black bg-opacity-50 hover:bg-opacity-70 transition-colors rounded"
                      >
                        <Play size={32} className="text-white" />
                      </button>
                    )}
                  </div>
                  
                  {/* Preview do vídeo */}
                  {showVideoPreview && videoInfo.videoUrl && (
                    <div className="mt-4">
                      <video 
                        controls 
                        className="w-full rounded"
                        src={videoInfo.videoUrl}
                      >
                        Seu navegador não suporta vídeos.
                      </video>
                    </div>
                  )}
                </div>
                
                {/* Informações do vídeo */}
                <div className="flex-1 space-y-4">
                  <div>
                    <h4 className="font-semibold text-lg mb-2">{videoInfo.title}</h4>
                    <div className="flex items-center gap-2 mb-3">
                      {videoInfo.authorAvatar && (
                        <img 
                          src={videoInfo.authorAvatar} 
                          alt={videoInfo.author} 
                          className="w-8 h-8 rounded-full"
                        />
                      )}
                      <span className="text-gray-700 flex items-center gap-1">
                        <User size={16} />
                        {videoInfo.author}
                      </span>
                    </div>
                  </div>
                  
                  {/* Estatísticas */}
                  <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                    <div className="text-center">
                      <div className="flex items-center justify-center gap-1 text-red-500 mb-1">
                        <Heart size={16} />
                      </div>
                      <div className="text-sm font-medium">{formatNumber(videoInfo.stats.likes)}</div>
                      <div className="text-xs text-gray-400">Curtidas*</div>
                    </div>
                    <div className="text-center">
                      <div className="flex items-center justify-center gap-1 text-blue-500 mb-1">
                        <MessageCircle size={16} />
                      </div>
                      <div className="text-sm font-medium">{formatNumber(videoInfo.stats.comments)}</div>
                      <div className="text-xs text-gray-400">Comentários*</div>
                    </div>
                    <div className="text-center">
                      <div className="flex items-center justify-center gap-1 text-green-500 mb-1">
                        <Share2 size={16} />
                      </div>
                      <div className="text-sm font-medium">{formatNumber(videoInfo.stats.shares)}</div>
                      <div className="text-xs text-gray-400">Compartilhamentos*</div>
                    </div>
                    <div className="text-center">
                      <div className="flex items-center justify-center gap-1 text-purple-500 mb-1">
                        <Eye size={16} />
                      </div>
                      <div className="text-sm font-medium">{formatNumber(videoInfo.stats.views)}</div>
                      <div className="text-xs text-gray-400">Visualizações*</div>
                    </div>
                  </div>
                  
                  {/* Aviso sobre estatísticas estimadas */}
                  <div className="mt-3 p-3 bg-orange-50 border border-orange-200 rounded text-sm text-orange-800">
                    <div className="flex items-start gap-2">
                      <div className="text-orange-500 mt-0.5">⚠️</div>
                      <div>
                        <p className="font-medium mb-1">Estatísticas Estimadas</p>
                        <p>Os números marcados com (*) são <strong>estimativas baseadas no conteúdo</strong>, não dados reais do TikTok.</p>
                        <p className="mt-1 text-xs">
                          <strong>Dados reais:</strong> Título, autor e vídeo | <strong>Estimados:</strong> Curtidas, comentários, shares, views
                        </p>
                      </div>
                    </div>
                  </div>
                  
                  {/* Opções de Download */}
                  <div className="flex gap-2">
                    <button
                      className={`px-4 py-2 rounded-md flex items-center gap-2 ${downloadType === 'video' ? 'bg-blue-600 text-white' : 'bg-gray-200 text-gray-700'}`}
                      onClick={() => setDownloadType('video')}
                      disabled={isDownloading}
                    >
                      <Play size={16} />
                      Vídeo (MP4)
                    </button>
                    <button
                      className={`px-4 py-2 rounded-md flex items-center gap-2 ${downloadType === 'audio' ? 'bg-blue-600 text-white' : 'bg-gray-200 text-gray-700'}`}
                      onClick={() => setDownloadType('audio')}
                      disabled={isDownloading}
                      title="Áudio será convertido automaticamente para MP3"
                    >
                      <Music size={16} />
                      Áudio (MP3)
                    </button>
                  </div>
                  
                  {/* Aviso sobre áudio */}
                  {downloadType === 'audio' && (
                    <div className="mt-2 p-3 bg-green-50 border border-green-200 rounded text-sm text-green-800">
                      <div className="flex items-start gap-2">
                        <div className="text-green-500 mt-0.5">🎵</div>
                        <div>
                          <p className="font-medium mb-1">Conversão Automática para MP3</p>
                          <p>O vídeo será baixado e automaticamente convertido para áudio MP3 de alta qualidade (192kbps) usando FFmpeg.</p>
                          <p className="mt-1 text-xs">
                            <strong>Processo:</strong> Download do vídeo → Conversão para MP3 → Download automático
                          </p>
                        </div>
                      </div>
                    </div>
                  )}
                  
                  {/* Ações adicionais */}
                  <div className="flex gap-2 mt-4">
                    <button
                      className="px-3 py-2 rounded-md bg-gray-100 text-gray-700 hover:bg-gray-200 transition-colors flex items-center gap-2"
                      onClick={copyUrl}
                      disabled={!videoInfo}
                    >
                      <Copy size={16} />
                      {copied ? 'Copiado!' : 'Copiar URL'}
                    </button>
                    <button
                      className="px-3 py-2 rounded-md bg-gray-100 text-gray-700 hover:bg-gray-200 transition-colors flex items-center gap-2"
                      onClick={shareVideo}
                      disabled={!videoInfo}
                    >
                      <Share size={16} />
                      Compartilhar
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Opções de Download */}
        {videoInfo && (
          <div className="bg-gray-50 rounded-lg p-6">
            <h3 className="text-lg font-semibold mb-4">Download</h3>
            
            {downloadProgress > 0 && downloadProgress < 100 && (
              <div className="mb-4">
                <div className="h-2 bg-gray-200 rounded-full overflow-hidden">
                  <div 
                    className="h-full bg-blue-600 transition-all duration-300" 
                    style={{ width: `${downloadProgress}%` }}
                  ></div>
                </div>
                <p className="text-sm text-gray-600 mt-1 text-center">
                  {downloadType === 'audio' 
                    ? (downloadProgress < 80 ? 'Baixando vídeo...' : 'Convertendo para MP3...')
                    : 'Baixando vídeo...'
                  } {downloadProgress}%
                </p>
              </div>
            )}
            
            {downloadProgress === 100 && (
              <div className="mb-4 bg-green-50 border border-green-200 rounded-md p-3 flex items-center gap-2">
                <Check size={20} className="text-green-500" />
                <p className="text-green-700">
                  {downloadType === 'video' 
                    ? 'Vídeo baixado com sucesso!' 
                    : 'Áudio convertido e baixado com sucesso!'
                  }
                </p>
              </div>
            )}
            
            <div className="grid grid-cols-1 gap-4">
              <button 
                className={`flex items-center justify-center gap-2 ${downloadType === 'video' ? 'bg-red-600 hover:bg-red-700' : 'bg-purple-600 hover:bg-purple-700'} text-white p-4 rounded-lg transition-colors disabled:opacity-50 disabled:cursor-not-allowed`}
                onClick={downloadMedia}
                disabled={isDownloading}
              >
                {isDownloading ? (
                  <>
                    <Loader2 size={20} className="animate-spin" />
                    {downloadType === 'video' ? 'Baixando Vídeo...' : 'Baixando e Convertendo para MP3...'}
                  </>
                ) : (
                  <>
                    <Download size={20} />
                    {downloadType === 'video' ? 'Baixar Vídeo (MP4)' : 'Baixar Áudio (MP3)'}
                  </>
                )}
              </button>
              
              <button 
                className="flex items-center justify-center gap-2 bg-gray-600 text-white p-3 rounded-lg hover:bg-gray-700 transition-colors"
                onClick={clearResults}
                disabled={isDownloading}
              >
                Limpar e buscar outro vídeo
              </button>
            </div>
          </div>
        )}
        
        {/* Estado inicial */}
        {!videoInfo && !loading && (
          <div className="bg-gray-50 rounded-lg p-6 text-center">
            <div className="text-gray-400 mb-4">
              <ExternalLink size={48} className="mx-auto" />
            </div>
            <h3 className="text-lg font-medium text-gray-700 mb-2">Cole uma URL do TikTok</h3>
            <p className="text-gray-500">Cole o link do vídeo do TikTok acima para começar o download</p>
          </div>
        )}

        {/* Informações sobre o uso */}
        <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
          <p className="text-blue-800 mb-3">
            <strong>ℹ️ Informação:</strong> Esta ferramenta permite baixar vídeos do TikTok sem marca d'água.
            Use-a apenas para conteúdos que você tem permissão para baixar e respeite os direitos autorais.
          </p>
          
          <div className="text-sm text-blue-700">
            <p className="font-medium mb-2">Status da API:</p>
            <p className="mb-3">
              {error?.includes('modo demonstração') ? 
                '🔴 API indisponível - Modo demonstração ativo' : 
                '🟢 API funcionando normalmente'
              }
            </p>
            
            <details className="mb-3">
              <summary className="font-medium cursor-pointer hover:text-blue-800">
                💡 Como funciona o download de áudio?
              </summary>
              <div className="mt-2 pl-4 space-y-2 text-blue-600">
                <p>• <strong>Conversão automática:</strong> O vídeo é baixado e convertido para MP3 automaticamente</p>
                <p>• <strong>Qualidade:</strong> Áudio MP3 em 192kbps, 44.1kHz de alta qualidade</p>
                <p>• <strong>Tecnologia:</strong> Usa FFmpeg para conversão profissional</p>
                <p>• <strong>Processo:</strong> Download → Conversão → Entrega do MP3 final</p>
                <p>• <strong>Tempo:</strong> Conversão adiciona alguns segundos ao processo</p>
              </div>
            </details>
            
            <p className="font-medium mb-2">Atalhos de teclado:</p>
            <ul className="space-y-1">
              <li><kbd className="px-2 py-1 bg-blue-100 rounded text-xs">Ctrl/Cmd + Enter</kbd> - Buscar vídeo</li>
              <li><kbd className="px-2 py-1 bg-blue-100 rounded text-xs">Ctrl/Cmd + V</kbd> - Colar URL (quando o campo estiver focado)</li>
              <li><kbd className="px-2 py-1 bg-blue-100 rounded text-xs">Escape</kbd> - Limpar resultados</li>
            </ul>
          </div>
        </div>
      </div>
    </ToolLayout>
  );
}
